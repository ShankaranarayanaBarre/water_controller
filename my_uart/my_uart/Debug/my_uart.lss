
my_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000750  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000030  20000000  00000750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  20000030  00000780  00020030  2**2
                  ALLOC
  3 .stack        00000400  20000058  000007a8  00020030  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
  6 .debug_info   000124be  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001899  00000000  00000000  0003256f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007ca5  00000000  00000000  00033e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000708  00000000  00000000  0003baad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000009f8  00000000  00000000  0003c1b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000db48  00000000  00000000  0003cbad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008751  00000000  00000000  0004a6f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0004b014  00000000  00000000  00052e46  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001230  00000000  00000000  0009de5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	58 04 00 20 15 01 00 00 11 01 00 00 11 01 00 00     X.. ............
	...
  2c:	11 01 00 00 00 00 00 00 00 00 00 00 11 01 00 00     ................
  3c:	11 01 00 00 11 01 00 00 11 01 00 00 11 01 00 00     ................
  4c:	11 01 00 00 11 01 00 00 11 01 00 00 11 01 00 00     ................
  5c:	11 01 00 00 11 01 00 00 11 01 00 00 11 01 00 00     ................
	...
  74:	11 01 00 00 11 01 00 00 11 01 00 00 11 01 00 00     ................
  84:	11 01 00 00 11 01 00 00 00 00 00 00 00 00 00 00     ................
  94:	11 01 00 00 11 01 00 00 11 01 00 00 11 01 00 00     ................

000000a4 <__do_global_dtors_aux>:
  a4:	b510      	push	{r4, lr}
  a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
  a8:	7823      	ldrb	r3, [r4, #0]
  aa:	2b00      	cmp	r3, #0
  ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
  ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
  b0:	2b00      	cmp	r3, #0
  b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
  b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
  b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
  b8:	bf00      	nop
  ba:	2301      	movs	r3, #1
  bc:	7023      	strb	r3, [r4, #0]
  be:	bd10      	pop	{r4, pc}
  c0:	20000030 	.word	0x20000030
  c4:	00000000 	.word	0x00000000
  c8:	00000750 	.word	0x00000750

000000cc <frame_dummy>:
  cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
  ce:	b510      	push	{r4, lr}
  d0:	2b00      	cmp	r3, #0
  d2:	d003      	beq.n	dc <frame_dummy+0x10>
  d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
  d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
  d8:	e000      	b.n	dc <frame_dummy+0x10>
  da:	bf00      	nop
  dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
  de:	6803      	ldr	r3, [r0, #0]
  e0:	2b00      	cmp	r3, #0
  e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
  e4:	bd10      	pop	{r4, pc}
  e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
  e8:	2b00      	cmp	r3, #0
  ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
  ec:	4798      	blx	r3
  ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
  f0:	00000000 	.word	0x00000000
  f4:	20000034 	.word	0x20000034
  f8:	00000750 	.word	0x00000750
  fc:	00000750 	.word	0x00000750
 100:	00000000 	.word	0x00000000

00000104 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
 104:	b510      	push	{r4, lr}
	system_init();
 106:	4b01      	ldr	r3, [pc, #4]	; (10c <atmel_start_init+0x8>)
 108:	4798      	blx	r3
}
 10a:	bd10      	pop	{r4, pc}
 10c:	00000239 	.word	0x00000239

00000110 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 110:	e7fe      	b.n	110 <Dummy_Handler>
	...

00000114 <Reset_Handler>:
{
 114:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 116:	4a1a      	ldr	r2, [pc, #104]	; (180 <Reset_Handler+0x6c>)
 118:	4b1a      	ldr	r3, [pc, #104]	; (184 <Reset_Handler+0x70>)
 11a:	429a      	cmp	r2, r3
 11c:	d011      	beq.n	142 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 11e:	001a      	movs	r2, r3
 120:	4b19      	ldr	r3, [pc, #100]	; (188 <Reset_Handler+0x74>)
 122:	429a      	cmp	r2, r3
 124:	d20d      	bcs.n	142 <Reset_Handler+0x2e>
 126:	4a19      	ldr	r2, [pc, #100]	; (18c <Reset_Handler+0x78>)
 128:	3303      	adds	r3, #3
 12a:	1a9b      	subs	r3, r3, r2
 12c:	089b      	lsrs	r3, r3, #2
 12e:	3301      	adds	r3, #1
 130:	009b      	lsls	r3, r3, #2
 132:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 134:	4813      	ldr	r0, [pc, #76]	; (184 <Reset_Handler+0x70>)
 136:	4912      	ldr	r1, [pc, #72]	; (180 <Reset_Handler+0x6c>)
 138:	588c      	ldr	r4, [r1, r2]
 13a:	5084      	str	r4, [r0, r2]
 13c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 13e:	429a      	cmp	r2, r3
 140:	d1fa      	bne.n	138 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 142:	4a13      	ldr	r2, [pc, #76]	; (190 <Reset_Handler+0x7c>)
 144:	4b13      	ldr	r3, [pc, #76]	; (194 <Reset_Handler+0x80>)
 146:	429a      	cmp	r2, r3
 148:	d20a      	bcs.n	160 <Reset_Handler+0x4c>
 14a:	43d3      	mvns	r3, r2
 14c:	4911      	ldr	r1, [pc, #68]	; (194 <Reset_Handler+0x80>)
 14e:	185b      	adds	r3, r3, r1
 150:	2103      	movs	r1, #3
 152:	438b      	bics	r3, r1
 154:	3304      	adds	r3, #4
 156:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 158:	2100      	movs	r1, #0
 15a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 15c:	4293      	cmp	r3, r2
 15e:	d1fc      	bne.n	15a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 160:	4a0d      	ldr	r2, [pc, #52]	; (198 <Reset_Handler+0x84>)
 162:	21ff      	movs	r1, #255	; 0xff
 164:	4b0d      	ldr	r3, [pc, #52]	; (19c <Reset_Handler+0x88>)
 166:	438b      	bics	r3, r1
 168:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
 16a:	4a0d      	ldr	r2, [pc, #52]	; (1a0 <Reset_Handler+0x8c>)
 16c:	6853      	ldr	r3, [r2, #4]
 16e:	397f      	subs	r1, #127	; 0x7f
 170:	430b      	orrs	r3, r1
 172:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 174:	4b0b      	ldr	r3, [pc, #44]	; (1a4 <Reset_Handler+0x90>)
 176:	4798      	blx	r3
        main();
 178:	4b0b      	ldr	r3, [pc, #44]	; (1a8 <Reset_Handler+0x94>)
 17a:	4798      	blx	r3
 17c:	e7fe      	b.n	17c <Reset_Handler+0x68>
 17e:	46c0      	nop			; (mov r8, r8)
 180:	00000750 	.word	0x00000750
 184:	20000000 	.word	0x20000000
 188:	20000030 	.word	0x20000030
 18c:	20000004 	.word	0x20000004
 190:	20000030 	.word	0x20000030
 194:	20000058 	.word	0x20000058
 198:	e000ed00 	.word	0xe000ed00
 19c:	00000000 	.word	0x00000000
 1a0:	41004000 	.word	0x41004000
 1a4:	0000069d 	.word	0x0000069d
 1a8:	00000689 	.word	0x00000689

000001ac <USART_0_PORT_init>:
#include <hpl_pm_base.h>

struct usart_sync_descriptor USART_0;

void USART_0_PORT_init(void)
{
 1ac:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 1ae:	4b0e      	ldr	r3, [pc, #56]	; (1e8 <USART_0_PORT_init+0x3c>)
 1b0:	2244      	movs	r2, #68	; 0x44
 1b2:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
 1b4:	2501      	movs	r5, #1
 1b6:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 1b8:	2401      	movs	r4, #1
 1ba:	4321      	orrs	r1, r4
 1bc:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 1be:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 1c0:	2032      	movs	r0, #50	; 0x32
 1c2:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
 1c4:	3a35      	subs	r2, #53	; 0x35
 1c6:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
 1c8:	3a0c      	subs	r2, #12
 1ca:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 1cc:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 1ce:	2145      	movs	r1, #69	; 0x45
 1d0:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
 1d2:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 1d4:	4322      	orrs	r2, r4
 1d6:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 1d8:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 1da:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
 1dc:	3936      	subs	r1, #54	; 0x36
 1de:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
 1e0:	3121      	adds	r1, #33	; 0x21
 1e2:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 1e4:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA04, PINMUX_PA04D_SERCOM0_PAD0);

	gpio_set_pin_function(PA05, PINMUX_PA05D_SERCOM0_PAD1);
}
 1e6:	bd30      	pop	{r4, r5, pc}
 1e8:	41004400 	.word	0x41004400

000001ec <USART_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
 1ec:	4a04      	ldr	r2, [pc, #16]	; (200 <USART_0_CLOCK_init+0x14>)
 1ee:	6a13      	ldr	r3, [r2, #32]
 1f0:	2104      	movs	r1, #4
 1f2:	430b      	orrs	r3, r1
 1f4:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
 1f6:	4a03      	ldr	r2, [pc, #12]	; (204 <USART_0_CLOCK_init+0x18>)
 1f8:	4b03      	ldr	r3, [pc, #12]	; (208 <USART_0_CLOCK_init+0x1c>)
 1fa:	805a      	strh	r2, [r3, #2]

void USART_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
 1fc:	4770      	bx	lr
 1fe:	46c0      	nop			; (mov r8, r8)
 200:	40000400 	.word	0x40000400
 204:	0000400d 	.word	0x0000400d
 208:	40000c00 	.word	0x40000c00

0000020c <USART_0_init>:

void USART_0_init(void)
{
 20c:	b510      	push	{r4, lr}
	USART_0_CLOCK_init();
 20e:	4b05      	ldr	r3, [pc, #20]	; (224 <USART_0_init+0x18>)
 210:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM0, (void *)NULL);
 212:	2200      	movs	r2, #0
 214:	4904      	ldr	r1, [pc, #16]	; (228 <USART_0_init+0x1c>)
 216:	4805      	ldr	r0, [pc, #20]	; (22c <USART_0_init+0x20>)
 218:	4b05      	ldr	r3, [pc, #20]	; (230 <USART_0_init+0x24>)
 21a:	4798      	blx	r3
	USART_0_PORT_init();
 21c:	4b05      	ldr	r3, [pc, #20]	; (234 <USART_0_init+0x28>)
 21e:	4798      	blx	r3
}
 220:	bd10      	pop	{r4, pc}
 222:	46c0      	nop			; (mov r8, r8)
 224:	000001ed 	.word	0x000001ed
 228:	42000800 	.word	0x42000800
 22c:	2000004c 	.word	0x2000004c
 230:	00000399 	.word	0x00000399
 234:	000001ad 	.word	0x000001ad

00000238 <system_init>:

void system_init(void)
{
 238:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
 23a:	4b02      	ldr	r3, [pc, #8]	; (244 <system_init+0xc>)
 23c:	4798      	blx	r3
	init_mcu();

	USART_0_init();
 23e:	4b02      	ldr	r3, [pc, #8]	; (248 <system_init+0x10>)
 240:	4798      	blx	r3
}
 242:	bd10      	pop	{r4, pc}
 244:	00000445 	.word	0x00000445
 248:	0000020d 	.word	0x0000020d

0000024c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
 24c:	b570      	push	{r4, r5, r6, lr}
 24e:	0006      	movs	r6, r0
 250:	000c      	movs	r4, r1
 252:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
 254:	2800      	cmp	r0, #0
 256:	d00d      	beq.n	274 <io_write+0x28>
 258:	0008      	movs	r0, r1
 25a:	1e43      	subs	r3, r0, #1
 25c:	4198      	sbcs	r0, r3
 25e:	b2c0      	uxtb	r0, r0
 260:	2234      	movs	r2, #52	; 0x34
 262:	4905      	ldr	r1, [pc, #20]	; (278 <io_write+0x2c>)
 264:	4b05      	ldr	r3, [pc, #20]	; (27c <io_write+0x30>)
 266:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
 268:	6833      	ldr	r3, [r6, #0]
 26a:	002a      	movs	r2, r5
 26c:	0021      	movs	r1, r4
 26e:	0030      	movs	r0, r6
 270:	4798      	blx	r3
}
 272:	bd70      	pop	{r4, r5, r6, pc}
 274:	2000      	movs	r0, #0
 276:	e7f3      	b.n	260 <io_write+0x14>
 278:	000006e4 	.word	0x000006e4
 27c:	0000043d 	.word	0x0000043d

00000280 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
 280:	b570      	push	{r4, r5, r6, lr}
 282:	0006      	movs	r6, r0
 284:	000c      	movs	r4, r1
 286:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
 288:	2800      	cmp	r0, #0
 28a:	d00d      	beq.n	2a8 <io_read+0x28>
 28c:	0008      	movs	r0, r1
 28e:	1e43      	subs	r3, r0, #1
 290:	4198      	sbcs	r0, r3
 292:	b2c0      	uxtb	r0, r0
 294:	223d      	movs	r2, #61	; 0x3d
 296:	4905      	ldr	r1, [pc, #20]	; (2ac <io_read+0x2c>)
 298:	4b05      	ldr	r3, [pc, #20]	; (2b0 <io_read+0x30>)
 29a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
 29c:	6873      	ldr	r3, [r6, #4]
 29e:	002a      	movs	r2, r5
 2a0:	0021      	movs	r1, r4
 2a2:	0030      	movs	r0, r6
 2a4:	4798      	blx	r3
}
 2a6:	bd70      	pop	{r4, r5, r6, pc}
 2a8:	2000      	movs	r0, #0
 2aa:	e7f3      	b.n	294 <io_read+0x14>
 2ac:	000006e4 	.word	0x000006e4
 2b0:	0000043d 	.word	0x0000043d

000002b4 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
 2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 2b6:	46ce      	mov	lr, r9
 2b8:	4647      	mov	r7, r8
 2ba:	b580      	push	{r7, lr}
 2bc:	0004      	movs	r4, r0
 2be:	000f      	movs	r7, r1
 2c0:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
 2c2:	2800      	cmp	r0, #0
 2c4:	d026      	beq.n	314 <usart_sync_write+0x60>
 2c6:	2900      	cmp	r1, #0
 2c8:	d026      	beq.n	318 <usart_sync_write+0x64>
 2ca:	0010      	movs	r0, r2
 2cc:	1e43      	subs	r3, r0, #1
 2ce:	4198      	sbcs	r0, r3
 2d0:	22f1      	movs	r2, #241	; 0xf1
 2d2:	4912      	ldr	r1, [pc, #72]	; (31c <usart_sync_write+0x68>)
 2d4:	4b12      	ldr	r3, [pc, #72]	; (320 <usart_sync_write+0x6c>)
 2d6:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
 2d8:	3408      	adds	r4, #8
 2da:	4d12      	ldr	r5, [pc, #72]	; (324 <usart_sync_write+0x70>)
 2dc:	0020      	movs	r0, r4
 2de:	47a8      	blx	r5
 2e0:	2800      	cmp	r0, #0
 2e2:	d0fb      	beq.n	2dc <usart_sync_write+0x28>
 2e4:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
 2e6:	4b10      	ldr	r3, [pc, #64]	; (328 <usart_sync_write+0x74>)
 2e8:	4699      	mov	r9, r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
 2ea:	4d0e      	ldr	r5, [pc, #56]	; (324 <usart_sync_write+0x70>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
 2ec:	5db9      	ldrb	r1, [r7, r6]
 2ee:	0020      	movs	r0, r4
 2f0:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
 2f2:	0020      	movs	r0, r4
 2f4:	47a8      	blx	r5
 2f6:	2800      	cmp	r0, #0
 2f8:	d0fb      	beq.n	2f2 <usart_sync_write+0x3e>
			;
	} while (++offset < length);
 2fa:	3601      	adds	r6, #1
 2fc:	4546      	cmp	r6, r8
 2fe:	d3f5      	bcc.n	2ec <usart_sync_write+0x38>
	while (!_usart_sync_is_transmit_done(&descr->device))
 300:	4d0a      	ldr	r5, [pc, #40]	; (32c <usart_sync_write+0x78>)
 302:	0020      	movs	r0, r4
 304:	47a8      	blx	r5
 306:	2800      	cmp	r0, #0
 308:	d0fb      	beq.n	302 <usart_sync_write+0x4e>
		;
	return (int32_t)offset;
}
 30a:	0030      	movs	r0, r6
 30c:	bc0c      	pop	{r2, r3}
 30e:	4690      	mov	r8, r2
 310:	4699      	mov	r9, r3
 312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
 314:	2000      	movs	r0, #0
 316:	e7db      	b.n	2d0 <usart_sync_write+0x1c>
 318:	2000      	movs	r0, #0
 31a:	e7d9      	b.n	2d0 <usart_sync_write+0x1c>
 31c:	000006f8 	.word	0x000006f8
 320:	0000043d 	.word	0x0000043d
 324:	0000058b 	.word	0x0000058b
 328:	0000057b 	.word	0x0000057b
 32c:	00000595 	.word	0x00000595

00000330 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
 330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 332:	46ce      	mov	lr, r9
 334:	4647      	mov	r7, r8
 336:	b580      	push	{r7, lr}
 338:	0004      	movs	r4, r0
 33a:	000f      	movs	r7, r1
 33c:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
 33e:	2800      	cmp	r0, #0
 340:	d01d      	beq.n	37e <usart_sync_read+0x4e>
 342:	2900      	cmp	r1, #0
 344:	d01d      	beq.n	382 <usart_sync_read+0x52>
 346:	0010      	movs	r0, r2
 348:	1e43      	subs	r3, r0, #1
 34a:	4198      	sbcs	r0, r3
 34c:	2286      	movs	r2, #134	; 0x86
 34e:	0052      	lsls	r2, r2, #1
 350:	490d      	ldr	r1, [pc, #52]	; (388 <usart_sync_read+0x58>)
 352:	4b0e      	ldr	r3, [pc, #56]	; (38c <usart_sync_read+0x5c>)
 354:	4798      	blx	r3
	uint32_t                      offset = 0;
 356:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
 358:	3408      	adds	r4, #8
 35a:	4d0d      	ldr	r5, [pc, #52]	; (390 <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
 35c:	4b0d      	ldr	r3, [pc, #52]	; (394 <usart_sync_read+0x64>)
 35e:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
 360:	0020      	movs	r0, r4
 362:	47a8      	blx	r5
 364:	2800      	cmp	r0, #0
 366:	d0fb      	beq.n	360 <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
 368:	0020      	movs	r0, r4
 36a:	47c8      	blx	r9
 36c:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
 36e:	3601      	adds	r6, #1
 370:	4546      	cmp	r6, r8
 372:	d3f5      	bcc.n	360 <usart_sync_read+0x30>

	return (int32_t)offset;
}
 374:	0030      	movs	r0, r6
 376:	bc0c      	pop	{r2, r3}
 378:	4690      	mov	r8, r2
 37a:	4699      	mov	r9, r3
 37c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
 37e:	2000      	movs	r0, #0
 380:	e7e4      	b.n	34c <usart_sync_read+0x1c>
 382:	2000      	movs	r0, #0
 384:	e7e2      	b.n	34c <usart_sync_read+0x1c>
 386:	46c0      	nop			; (mov r8, r8)
 388:	000006f8 	.word	0x000006f8
 38c:	0000043d 	.word	0x0000043d
 390:	0000059f 	.word	0x0000059f
 394:	00000583 	.word	0x00000583

00000398 <usart_sync_init>:
{
 398:	b570      	push	{r4, r5, r6, lr}
 39a:	0005      	movs	r5, r0
 39c:	000c      	movs	r4, r1
	ASSERT(descr && hw);
 39e:	2800      	cmp	r0, #0
 3a0:	d013      	beq.n	3ca <usart_sync_init+0x32>
 3a2:	0008      	movs	r0, r1
 3a4:	1e43      	subs	r3, r0, #1
 3a6:	4198      	sbcs	r0, r3
 3a8:	b2c0      	uxtb	r0, r0
 3aa:	2234      	movs	r2, #52	; 0x34
 3ac:	4908      	ldr	r1, [pc, #32]	; (3d0 <usart_sync_init+0x38>)
 3ae:	4b09      	ldr	r3, [pc, #36]	; (3d4 <usart_sync_init+0x3c>)
 3b0:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
 3b2:	0028      	movs	r0, r5
 3b4:	3008      	adds	r0, #8
 3b6:	0021      	movs	r1, r4
 3b8:	4b07      	ldr	r3, [pc, #28]	; (3d8 <usart_sync_init+0x40>)
 3ba:	4798      	blx	r3
	if (init_status) {
 3bc:	2800      	cmp	r0, #0
 3be:	d103      	bne.n	3c8 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
 3c0:	4b06      	ldr	r3, [pc, #24]	; (3dc <usart_sync_init+0x44>)
 3c2:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
 3c4:	4b06      	ldr	r3, [pc, #24]	; (3e0 <usart_sync_init+0x48>)
 3c6:	602b      	str	r3, [r5, #0]
}
 3c8:	bd70      	pop	{r4, r5, r6, pc}
 3ca:	2000      	movs	r0, #0
 3cc:	e7ed      	b.n	3aa <usart_sync_init+0x12>
 3ce:	46c0      	nop			; (mov r8, r8)
 3d0:	000006f8 	.word	0x000006f8
 3d4:	0000043d 	.word	0x0000043d
 3d8:	0000053d 	.word	0x0000053d
 3dc:	00000331 	.word	0x00000331
 3e0:	000002b5 	.word	0x000002b5

000003e4 <usart_sync_enable>:
{
 3e4:	b510      	push	{r4, lr}
 3e6:	0004      	movs	r4, r0
	ASSERT(descr);
 3e8:	1e43      	subs	r3, r0, #1
 3ea:	4198      	sbcs	r0, r3
 3ec:	b2c0      	uxtb	r0, r0
 3ee:	2253      	movs	r2, #83	; 0x53
 3f0:	4904      	ldr	r1, [pc, #16]	; (404 <STACK_SIZE+0x4>)
 3f2:	4b05      	ldr	r3, [pc, #20]	; (408 <STACK_SIZE+0x8>)
 3f4:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
 3f6:	0020      	movs	r0, r4
 3f8:	3008      	adds	r0, #8
 3fa:	4b04      	ldr	r3, [pc, #16]	; (40c <STACK_SIZE+0xc>)
 3fc:	4798      	blx	r3
}
 3fe:	2000      	movs	r0, #0
 400:	bd10      	pop	{r4, pc}
 402:	46c0      	nop			; (mov r8, r8)
 404:	000006f8 	.word	0x000006f8
 408:	0000043d 	.word	0x0000043d
 40c:	00000569 	.word	0x00000569

00000410 <usart_sync_get_io_descriptor>:
{
 410:	b570      	push	{r4, r5, r6, lr}
 412:	0004      	movs	r4, r0
 414:	000d      	movs	r5, r1
	ASSERT(descr && io);
 416:	2800      	cmp	r0, #0
 418:	d00a      	beq.n	430 <usart_sync_get_io_descriptor+0x20>
 41a:	0008      	movs	r0, r1
 41c:	1e43      	subs	r3, r0, #1
 41e:	4198      	sbcs	r0, r3
 420:	b2c0      	uxtb	r0, r0
 422:	2269      	movs	r2, #105	; 0x69
 424:	4903      	ldr	r1, [pc, #12]	; (434 <usart_sync_get_io_descriptor+0x24>)
 426:	4b04      	ldr	r3, [pc, #16]	; (438 <usart_sync_get_io_descriptor+0x28>)
 428:	4798      	blx	r3
	*io = &descr->io;
 42a:	602c      	str	r4, [r5, #0]
}
 42c:	2000      	movs	r0, #0
 42e:	bd70      	pop	{r4, r5, r6, pc}
 430:	2000      	movs	r0, #0
 432:	e7f6      	b.n	422 <usart_sync_get_io_descriptor+0x12>
 434:	000006f8 	.word	0x000006f8
 438:	0000043d 	.word	0x0000043d

0000043c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
 43c:	2800      	cmp	r0, #0
 43e:	d100      	bne.n	442 <assert+0x6>
		__asm("BKPT #0");
 440:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
 442:	4770      	bx	lr

00000444 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
 444:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
 446:	4b06      	ldr	r3, [pc, #24]	; (460 <_init_chip+0x1c>)
 448:	685a      	ldr	r2, [r3, #4]
 44a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
 44c:	4b05      	ldr	r3, [pc, #20]	; (464 <_init_chip+0x20>)
 44e:	4798      	blx	r3
	_sysctrl_init_sources();
 450:	4b05      	ldr	r3, [pc, #20]	; (468 <_init_chip+0x24>)
 452:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
 454:	4b05      	ldr	r3, [pc, #20]	; (46c <_init_chip+0x28>)
 456:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
 458:	20ff      	movs	r0, #255	; 0xff
 45a:	4b05      	ldr	r3, [pc, #20]	; (470 <_init_chip+0x2c>)
 45c:	4798      	blx	r3
}
 45e:	bd10      	pop	{r4, pc}
 460:	41004000 	.word	0x41004000
 464:	00000495 	.word	0x00000495
 468:	000005a9 	.word	0x000005a9
 46c:	000005f1 	.word	0x000005f1
 470:	00000475 	.word	0x00000475

00000474 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
 474:	07c3      	lsls	r3, r0, #31
 476:	d50a      	bpl.n	48e <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
 478:	4b05      	ldr	r3, [pc, #20]	; (490 <_gclk_init_generators_by_fref+0x1c>)
 47a:	2280      	movs	r2, #128	; 0x80
 47c:	0052      	lsls	r2, r2, #1
 47e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
 480:	2283      	movs	r2, #131	; 0x83
 482:	0252      	lsls	r2, r2, #9
 484:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
 486:	001a      	movs	r2, r3
 488:	7853      	ldrb	r3, [r2, #1]
 48a:	09db      	lsrs	r3, r3, #7
 48c:	d1fc      	bne.n	488 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GEN_7_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_7_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_7_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_7_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SRC | GCLK_GENCTRL_ID(7));
	}
#endif
}
 48e:	4770      	bx	lr
 490:	40000c00 	.word	0x40000c00

00000494 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
 494:	4b06      	ldr	r3, [pc, #24]	; (4b0 <_pm_init+0x1c>)
 496:	7a1a      	ldrb	r2, [r3, #8]
 498:	b2d2      	uxtb	r2, r2
 49a:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
 49c:	7a5a      	ldrb	r2, [r3, #9]
 49e:	b2d2      	uxtb	r2, r2
 4a0:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
 4a2:	7a9a      	ldrb	r2, [r3, #10]
 4a4:	b2d2      	uxtb	r2, r2
 4a6:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
 4a8:	7ada      	ldrb	r2, [r3, #11]
 4aa:	b2d2      	uxtb	r2, r2
 4ac:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
 4ae:	4770      	bx	lr
 4b0:	40000400 	.word	0x40000400

000004b4 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
 4b4:	b510      	push	{r4, lr}
 4b6:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
 4b8:	4b1a      	ldr	r3, [pc, #104]	; (524 <_usart_init+0x70>)
 4ba:	18c3      	adds	r3, r0, r3
 4bc:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
 4be:	b2db      	uxtb	r3, r3
 4c0:	2b00      	cmp	r3, #0
 4c2:	d004      	beq.n	4ce <_usart_init+0x1a>
	ASSERT(false);
 4c4:	4a18      	ldr	r2, [pc, #96]	; (528 <_usart_init+0x74>)
 4c6:	4919      	ldr	r1, [pc, #100]	; (52c <_usart_init+0x78>)
 4c8:	2000      	movs	r0, #0
 4ca:	4b19      	ldr	r3, [pc, #100]	; (530 <_usart_init+0x7c>)
 4cc:	4798      	blx	r3
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw)
{
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
 4ce:	8a23      	ldrh	r3, [r4, #16]
 4d0:	0bdb      	lsrs	r3, r3, #15
 4d2:	d1fc      	bne.n	4ce <_usart_init+0x1a>
 4d4:	8a23      	ldrh	r3, [r4, #16]
 4d6:	0bdb      	lsrs	r3, r3, #15
 4d8:	d1fc      	bne.n	4d4 <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
 4da:	6823      	ldr	r3, [r4, #0]
	uint8_t i = _get_sercom_index(hw);

	hri_sercomusart_wait_for_sync(hw);
	if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
 4dc:	079b      	lsls	r3, r3, #30
 4de:	d507      	bpl.n	4f0 <_usart_init+0x3c>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
 4e0:	2300      	movs	r3, #0
 4e2:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
 4e4:	8a23      	ldrh	r3, [r4, #16]
 4e6:	0bdb      	lsrs	r3, r3, #15
 4e8:	d1fc      	bne.n	4e4 <_usart_init+0x30>
 4ea:	8a23      	ldrh	r3, [r4, #16]
 4ec:	0bdb      	lsrs	r3, r3, #15
 4ee:	d1fc      	bne.n	4ea <_usart_init+0x36>
	((Sercom *)hw)->USART.CTRLA.reg = data;
 4f0:	2301      	movs	r3, #1
 4f2:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
 4f4:	8a23      	ldrh	r3, [r4, #16]
 4f6:	0bdb      	lsrs	r3, r3, #15
 4f8:	d1fc      	bne.n	4f4 <_usart_init+0x40>
 4fa:	8a23      	ldrh	r3, [r4, #16]
 4fc:	0bdb      	lsrs	r3, r3, #15
 4fe:	d1fc      	bne.n	4fa <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg = data;
 500:	4b0c      	ldr	r3, [pc, #48]	; (534 <_usart_init+0x80>)
 502:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
 504:	8a23      	ldrh	r3, [r4, #16]
 506:	0bdb      	lsrs	r3, r3, #15
 508:	d1fc      	bne.n	504 <_usart_init+0x50>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
 50a:	23c0      	movs	r3, #192	; 0xc0
 50c:	029b      	lsls	r3, r3, #10
 50e:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
 510:	8a23      	ldrh	r3, [r4, #16]
 512:	0bdb      	lsrs	r3, r3, #15
 514:	d1fc      	bne.n	510 <_usart_init+0x5c>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
 516:	4b08      	ldr	r3, [pc, #32]	; (538 <_usart_init+0x84>)
 518:	8163      	strh	r3, [r4, #10]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
 51a:	2300      	movs	r3, #0
 51c:	7223      	strb	r3, [r4, #8]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
	hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
 51e:	2000      	movs	r0, #0
 520:	bd10      	pop	{r4, pc}
 522:	46c0      	nop			; (mov r8, r8)
 524:	bdfff800 	.word	0xbdfff800
 528:	0000022a 	.word	0x0000022a
 52c:	00000714 	.word	0x00000714
 530:	0000043d 	.word	0x0000043d
 534:	40100004 	.word	0x40100004
 538:	ffffd8ad 	.word	0xffffd8ad

0000053c <_usart_sync_init>:
{
 53c:	b570      	push	{r4, r5, r6, lr}
 53e:	0005      	movs	r5, r0
 540:	000c      	movs	r4, r1
	ASSERT(device);
 542:	1e43      	subs	r3, r0, #1
 544:	4198      	sbcs	r0, r3
 546:	b2c0      	uxtb	r0, r0
 548:	22a1      	movs	r2, #161	; 0xa1
 54a:	4904      	ldr	r1, [pc, #16]	; (55c <_usart_sync_init+0x20>)
 54c:	4b04      	ldr	r3, [pc, #16]	; (560 <_usart_sync_init+0x24>)
 54e:	4798      	blx	r3
	device->hw = hw;
 550:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
 552:	0020      	movs	r0, r4
 554:	4b03      	ldr	r3, [pc, #12]	; (564 <_usart_sync_init+0x28>)
 556:	4798      	blx	r3
}
 558:	bd70      	pop	{r4, r5, r6, pc}
 55a:	46c0      	nop			; (mov r8, r8)
 55c:	00000714 	.word	0x00000714
 560:	0000043d 	.word	0x0000043d
 564:	000004b5 	.word	0x000004b5

00000568 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
 568:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
 56a:	6813      	ldr	r3, [r2, #0]
 56c:	2102      	movs	r1, #2
 56e:	430b      	orrs	r3, r1
 570:	6013      	str	r3, [r2, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
 572:	8a13      	ldrh	r3, [r2, #16]
 574:	0bdb      	lsrs	r3, r3, #15
 576:	d1fc      	bne.n	572 <_usart_sync_enable+0xa>
}
 578:	4770      	bx	lr

0000057a <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
 57a:	6803      	ldr	r3, [r0, #0]
 57c:	b289      	uxth	r1, r1
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
 57e:	8319      	strh	r1, [r3, #24]
}
 580:	4770      	bx	lr

00000582 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
 582:	6803      	ldr	r3, [r0, #0]
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.DATA.reg;
 584:	8b18      	ldrh	r0, [r3, #24]
 586:	b2c0      	uxtb	r0, r0
}
 588:	4770      	bx	lr

0000058a <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
 58a:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
 58c:	7b98      	ldrb	r0, [r3, #14]
 58e:	2301      	movs	r3, #1
 590:	4018      	ands	r0, r3
}
 592:	4770      	bx	lr

00000594 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
 594:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
 596:	7b98      	ldrb	r0, [r3, #14]
 598:	0780      	lsls	r0, r0, #30
 59a:	0fc0      	lsrs	r0, r0, #31
}
 59c:	4770      	bx	lr

0000059e <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
 59e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
 5a0:	7b98      	ldrb	r0, [r3, #14]
 5a2:	0740      	lsls	r0, r0, #29
 5a4:	0fc0      	lsrs	r0, r0, #31
}
 5a6:	4770      	bx	lr

000005a8 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
 5a8:	4b0e      	ldr	r3, [pc, #56]	; (5e4 <_sysctrl_init_sources+0x3c>)
 5aa:	6a1a      	ldr	r2, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
 5ac:	6a19      	ldr	r1, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
 5ae:	480e      	ldr	r0, [pc, #56]	; (5e8 <_sysctrl_init_sources+0x40>)
 5b0:	4002      	ands	r2, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
 5b2:	0f89      	lsrs	r1, r1, #30
 5b4:	0789      	lsls	r1, r1, #30
	hri_sysctrl_write_OSC8M_reg(hw,
 5b6:	480d      	ldr	r0, [pc, #52]	; (5ec <_sysctrl_init_sources+0x44>)
 5b8:	4301      	orrs	r1, r0
 5ba:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
 5bc:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 5be:	699a      	ldr	r2, [r3, #24]
 5c0:	2102      	movs	r1, #2
 5c2:	430a      	orrs	r2, r1
 5c4:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
 5c6:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
 5c8:	311d      	adds	r1, #29
 5ca:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
 5cc:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
 5ce:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
 5d0:	2208      	movs	r2, #8
 5d2:	68cb      	ldr	r3, [r1, #12]
 5d4:	421a      	tst	r2, r3
 5d6:	d0fc      	beq.n	5d2 <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
 5d8:	4a02      	ldr	r2, [pc, #8]	; (5e4 <_sysctrl_init_sources+0x3c>)
 5da:	6a13      	ldr	r3, [r2, #32]
 5dc:	2180      	movs	r1, #128	; 0x80
 5de:	430b      	orrs	r3, r1
 5e0:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
 5e2:	4770      	bx	lr
 5e4:	40000800 	.word	0x40000800
 5e8:	0fff0000 	.word	0x0fff0000
 5ec:	00000302 	.word	0x00000302

000005f0 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
 5f0:	4a02      	ldr	r2, [pc, #8]	; (5fc <_sysctrl_init_referenced_generators+0xc>)
 5f2:	6993      	ldr	r3, [r2, #24]
 5f4:	2102      	movs	r1, #2
 5f6:	438b      	bics	r3, r1
 5f8:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
 5fa:	4770      	bx	lr
 5fc:	40000800 	.word	0x40000800

00000600 <PGA460_calc_checksum>:
	io_write(io, gl_data_buff, 4);
	io_read(io, read_buff, 3);
	
}
uint8_t PGA460_calc_checksum (uint8_t * buff, uint32_t len)
{
 600:	b510      	push	{r4, lr}
	uint16_t checksum = 0;
	for (uint32_t i =0; i < len; i++)
 602:	2900      	cmp	r1, #0
 604:	d00e      	beq.n	624 <PGA460_calc_checksum+0x24>
 606:	0003      	movs	r3, r0
 608:	1841      	adds	r1, r0, r1
 60a:	2000      	movs	r0, #0
	{
		checksum += buff[i];
		checksum = ((checksum + (checksum >> 0x08u)) & 0xFFu);
 60c:	24ff      	movs	r4, #255	; 0xff
		checksum += buff[i];
 60e:	781a      	ldrb	r2, [r3, #0]
 610:	1880      	adds	r0, r0, r2
		checksum = ((checksum + (checksum >> 0x08u)) & 0xFFu);
 612:	0a02      	lsrs	r2, r0, #8
 614:	1880      	adds	r0, r0, r2
 616:	4020      	ands	r0, r4
 618:	3301      	adds	r3, #1
	for (uint32_t i =0; i < len; i++)
 61a:	428b      	cmp	r3, r1
 61c:	d1f7      	bne.n	60e <PGA460_calc_checksum+0xe>
	}
	return(0xFFu - (checksum & 0xFFu));
 61e:	43c0      	mvns	r0, r0
 620:	b2c0      	uxtb	r0, r0
}
 622:	bd10      	pop	{r4, pc}
	uint16_t checksum = 0;
 624:	2000      	movs	r0, #0
 626:	e7fa      	b.n	61e <PGA460_calc_checksum+0x1e>

00000628 <PGA460_read_register>:
{
 628:	b530      	push	{r4, r5, lr}
 62a:	b083      	sub	sp, #12
	uint8_t read_buff[4] = {0};
 62c:	2300      	movs	r3, #0
 62e:	9300      	str	r3, [sp, #0]
	gl_data_buff[1] = 0x09u;
 630:	4c0e      	ldr	r4, [pc, #56]	; (66c <PGA460_read_register+0x44>)
 632:	3309      	adds	r3, #9
 634:	7063      	strb	r3, [r4, #1]
	gl_data_buff[2] = 0x1Bu;
 636:	3312      	adds	r3, #18
 638:	70a3      	strb	r3, [r4, #2]
	gl_data_buff[3] = PGA460_calc_checksum(&gl_data_buff[1], 2);
 63a:	1c60      	adds	r0, r4, #1
 63c:	2102      	movs	r1, #2
 63e:	4b0c      	ldr	r3, [pc, #48]	; (670 <PGA460_read_register+0x48>)
 640:	4798      	blx	r3
 642:	70e0      	strb	r0, [r4, #3]
	usart_sync_get_io_descriptor(&USART_0, &io);
 644:	4d0b      	ldr	r5, [pc, #44]	; (674 <PGA460_read_register+0x4c>)
 646:	a901      	add	r1, sp, #4
 648:	0028      	movs	r0, r5
 64a:	4b0b      	ldr	r3, [pc, #44]	; (678 <PGA460_read_register+0x50>)
 64c:	4798      	blx	r3
	usart_sync_enable(&USART_0);
 64e:	0028      	movs	r0, r5
 650:	4b0a      	ldr	r3, [pc, #40]	; (67c <PGA460_read_register+0x54>)
 652:	4798      	blx	r3
	io_write(io, gl_data_buff, 4);
 654:	2204      	movs	r2, #4
 656:	0021      	movs	r1, r4
 658:	9801      	ldr	r0, [sp, #4]
 65a:	4b09      	ldr	r3, [pc, #36]	; (680 <PGA460_read_register+0x58>)
 65c:	4798      	blx	r3
	io_read(io, read_buff, 3);
 65e:	2203      	movs	r2, #3
 660:	4669      	mov	r1, sp
 662:	9801      	ldr	r0, [sp, #4]
 664:	4b07      	ldr	r3, [pc, #28]	; (684 <PGA460_read_register+0x5c>)
 666:	4798      	blx	r3
}
 668:	b003      	add	sp, #12
 66a:	bd30      	pop	{r4, r5, pc}
 66c:	20000000 	.word	0x20000000
 670:	00000601 	.word	0x00000601
 674:	2000004c 	.word	0x2000004c
 678:	00000411 	.word	0x00000411
 67c:	000003e5 	.word	0x000003e5
 680:	0000024d 	.word	0x0000024d
 684:	00000281 	.word	0x00000281

00000688 <main>:
int main(void)
{
 688:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 68a:	4b02      	ldr	r3, [pc, #8]	; (694 <main+0xc>)
 68c:	4798      	blx	r3

	PGA460_read_register();
 68e:	4b02      	ldr	r3, [pc, #8]	; (698 <main+0x10>)
 690:	4798      	blx	r3
 692:	e7fe      	b.n	692 <main+0xa>
 694:	00000105 	.word	0x00000105
 698:	00000629 	.word	0x00000629

0000069c <__libc_init_array>:
 69c:	b570      	push	{r4, r5, r6, lr}
 69e:	2600      	movs	r6, #0
 6a0:	4d0c      	ldr	r5, [pc, #48]	; (6d4 <__libc_init_array+0x38>)
 6a2:	4c0d      	ldr	r4, [pc, #52]	; (6d8 <__libc_init_array+0x3c>)
 6a4:	1b64      	subs	r4, r4, r5
 6a6:	10a4      	asrs	r4, r4, #2
 6a8:	42a6      	cmp	r6, r4
 6aa:	d109      	bne.n	6c0 <__libc_init_array+0x24>
 6ac:	2600      	movs	r6, #0
 6ae:	f000 f83f 	bl	730 <_init>
 6b2:	4d0a      	ldr	r5, [pc, #40]	; (6dc <__libc_init_array+0x40>)
 6b4:	4c0a      	ldr	r4, [pc, #40]	; (6e0 <__libc_init_array+0x44>)
 6b6:	1b64      	subs	r4, r4, r5
 6b8:	10a4      	asrs	r4, r4, #2
 6ba:	42a6      	cmp	r6, r4
 6bc:	d105      	bne.n	6ca <__libc_init_array+0x2e>
 6be:	bd70      	pop	{r4, r5, r6, pc}
 6c0:	00b3      	lsls	r3, r6, #2
 6c2:	58eb      	ldr	r3, [r5, r3]
 6c4:	4798      	blx	r3
 6c6:	3601      	adds	r6, #1
 6c8:	e7ee      	b.n	6a8 <__libc_init_array+0xc>
 6ca:	00b3      	lsls	r3, r6, #2
 6cc:	58eb      	ldr	r3, [r5, r3]
 6ce:	4798      	blx	r3
 6d0:	3601      	adds	r6, #1
 6d2:	e7f2      	b.n	6ba <__libc_init_array+0x1e>
 6d4:	0000073c 	.word	0x0000073c
 6d8:	0000073c 	.word	0x0000073c
 6dc:	0000073c 	.word	0x0000073c
 6e0:	00000740 	.word	0x00000740
 6e4:	682f2e2e 	.word	0x682f2e2e
 6e8:	732f6c61 	.word	0x732f6c61
 6ec:	682f6372 	.word	0x682f6372
 6f0:	695f6c61 	.word	0x695f6c61
 6f4:	00632e6f 	.word	0x00632e6f
 6f8:	682f2e2e 	.word	0x682f2e2e
 6fc:	732f6c61 	.word	0x732f6c61
 700:	682f6372 	.word	0x682f6372
 704:	755f6c61 	.word	0x755f6c61
 708:	74726173 	.word	0x74726173
 70c:	6e79735f 	.word	0x6e79735f
 710:	00632e63 	.word	0x00632e63
 714:	682f2e2e 	.word	0x682f2e2e
 718:	732f6c70 	.word	0x732f6c70
 71c:	6f637265 	.word	0x6f637265
 720:	70682f6d 	.word	0x70682f6d
 724:	65735f6c 	.word	0x65735f6c
 728:	6d6f6372 	.word	0x6d6f6372
 72c:	0000632e 	.word	0x0000632e

00000730 <_init>:
 730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 732:	46c0      	nop			; (mov r8, r8)
 734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 736:	bc08      	pop	{r3}
 738:	469e      	mov	lr, r3
 73a:	4770      	bx	lr

0000073c <__init_array_start>:
 73c:	000000cd 	.word	0x000000cd

00000740 <_fini>:
 740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 742:	46c0      	nop			; (mov r8, r8)
 744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 746:	bc08      	pop	{r3}
 748:	469e      	mov	lr, r3
 74a:	4770      	bx	lr

0000074c <__fini_array_start>:
 74c:	000000a5 	.word	0x000000a5
